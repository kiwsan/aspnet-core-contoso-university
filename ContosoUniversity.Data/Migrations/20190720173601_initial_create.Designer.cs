// <auto-generated />
using System;
using ContosoUniversity.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ContosoUniversity.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190720173601_initial_create")]
    partial class initial_create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code");

                    b.Property<int>("Credits")
                        .HasColumnName("credits");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnName("department_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("course");
                });

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.CourseAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId")
                        .HasColumnName("course_id");

                    b.Property<Guid>("InstructorId")
                        .HasColumnName("instructor_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("course_assignment");
                });

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Budget")
                        .HasColumnName("budget")
                        .HasColumnType("money");

                    b.Property<Guid?>("InstructorId")
                        .IsRequired()
                        .HasColumnName("instructor_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartAtDate")
                        .HasColumnName("start_date");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("department");
                });

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId")
                        .HasColumnName("course_id");

                    b.Property<int>("Grade")
                        .HasColumnName("grade");

                    b.Property<Guid>("StudentId")
                        .HasColumnName("student_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("enrollment");
                });

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.OfficeAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnName("location")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("office_assignment");
                });

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.Instructor", b =>
                {
                    b.HasBaseType("ContosoUniversity.Domain.Entities.Person");

                    b.Property<DateTime>("HireAtDate")
                        .HasColumnName("hire_date");

                    b.ToTable("instructor");

                    b.HasDiscriminator().HasValue("Instructor");
                });

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.Student", b =>
                {
                    b.HasBaseType("ContosoUniversity.Domain.Entities.Person");

                    b.Property<DateTime>("EnrollmentAtDate")
                        .HasColumnName("enrollment_date");

                    b.ToTable("student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.Course", b =>
                {
                    b.HasOne("ContosoUniversity.Domain.Entities.Department", "TableDepartment")
                        .WithMany("TableCourses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.CourseAssignment", b =>
                {
                    b.HasOne("ContosoUniversity.Domain.Entities.Course", "TableCourse")
                        .WithMany("TableCourseAssignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContosoUniversity.Domain.Entities.Instructor", "TableInstructor")
                        .WithMany("TableCourseAssignments")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.Department", b =>
                {
                    b.HasOne("ContosoUniversity.Domain.Entities.Instructor", "TableInstructor")
                        .WithMany("TableDepartments")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContosoUniversity.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("ContosoUniversity.Domain.Entities.Course", "TableCourse")
                        .WithMany("TableEnrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContosoUniversity.Domain.Entities.Student", "TableStudent")
                        .WithMany("TableEnrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
